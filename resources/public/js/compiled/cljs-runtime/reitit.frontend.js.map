{"version":3,"sources":["reitit/frontend.cljs"],"mappings":";AAOA,8BAAA,9BAAOA,oEAAwBC,EAAEC;AAAjC,AACE,IAAMC,KAAG,AAAYF,YAAEC;AAAvB,AACE,GAAI,aAAA,ZAAG,AAASC;AACd,WAAA,HAAMA;;AACN,OAACC,cAAID;;;AAEX;;;+BAAA,/BAAME,sEAEEC;AAFR,AAGE,IAAML,IAAE,AAAeK;AAAvB,uFAGO,AAACC,4CAAI,+DAAA,WAAAC,1EAACC,6CAAKC,hLACX,oDAAA,7CAACC;AADI,AAAe,qCAAAH,9BAACR,4BAAYC;IAFjCA,AACA;;AAIT,AAAA;;;;;;gCAAA,wCAAAW,xEAAME;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,4DAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,4DAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,8DAAA,9DAAMD,yEAKFM,WAAOC;AALX,AAKiB,mFAAA,5EAACC,4DAAcF,WAAOC;;;AALvC,CAAA,8DAAA,2BAAAL,zFAAMF,yEAMFM,WAAOC;AANX,AAAA,IAAAJ,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;wBAAA,AAAAE,4CAAAF,eAAA,/EAMwBM;AANxB,AAOG,IAAMjB,MAAI,AAAQkB,eAAIH;IAChBI,eAAQ,kBAAIF,mBACF,WAAKG;AAAL,AACE,IAAA,AAAK,OAACE,6BAAiBF;gBAAvB,GAAA,CAAAC,kBACYZ;AADZ,QAAAY,JACqBE;AADrB,AAEO,CAACN,kDAAAA,2DAAAA,XAAkBG,uCAAAA,jCAAMG,uCAAAA;;AACzB,MAAOA;;AAHd,AAAA,MAAAF;;;IAIFC;AAPhB,AAQE,IAAAE,qBAAe,AAACC,0BAAgBX,WAAO,AAAUd;AAAjD,AAAA,oBAAAwB;AAAA,YAAAA,RAASJ;AAAT,AACE,IAAMzB,IAAE,AAACI,6BAAaC;IAChBoB,YAAM,oDAAA,pDAACM,8CAAMN,0EAAoBzB;IAGjCgC,aAAW,iBAAAC,mBAAI,CAACT,6CAAAA,wDAAAA,bAAQC,oCAAAA;AAAb,AAAA,oBAAAQ;AAAAA;;AAAA,kDAAA,gKAAA,3GACW,AAAA,gGAAcR,mEACbzB;;;AAN7B,AAOE,+DAAA,xDAAC+B,8CAAMN,4EAAkBO;;AAR7B;;;;AAfL,CAAA,wDAAA,xDAAMnB;;AAAN,AAyBA,AAAA;;;;;gCAAA,wCAAAF,xEAAMwB;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,4DAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,4DAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAArB,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,8DAAA,9DAAMqB,yEAIFhB,WAAOiB;AAJX,AAKG,mFAAA,5EAACC,4DAAclB,WAAOiB;;;AALzB,CAAA,8DAAA,9DAAMD,yEAMFhB,WAAOiB,KAAKE;AANhB,AAOG,OAACC,0BAAgBpB,WAAOiB,KAAKE;;;AAPhC,CAAA,wDAAA,xDAAMH;;AAAN,AASA,AAAA;;;;yBAAA,iCAAAxB,1DAAM8B;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,qDAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,qDAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAA3B,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,uDAAA,vDAAM2B,kEAGFC;AAHJ,AAIG,uEAAA,hEAACC,qDAAOD;;;AAJX,CAAA,uDAAA,vDAAMD,kEAKFC,WAAWE;AALf,AAMG,OAACC,iDAASH,WAAW,uGAAA,2CAAA,lJAACI,4MAAgBC,iDAAmCH;;;AAN5E,CAAA,iDAAA,jDAAMH;;AAAN,AAQA,AAAA;;;sCAAA,8CAAA9B,pFAAMsC;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,kEAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,kEAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAnC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,oEAAA,pEAAMmC,+EAEF9B,WAAOiB;AAFX,AAGG,yFAAA,lFAACc,kEAAe/B,WAAOiB;;;AAH1B,CAAA,oEAAA,pEAAMa,+EAIF9B,WAAOiB,KAAKE;AAJhB,AAKG,IAAAT,qBAAe,AAACQ,4DAAclB,WAAOiB,KAAKE;AAA1C,AAAA,oBAAAT;AAAA,YAAAA,RAASJ;AAAT,AACE,GAAI,AAAC0B,iCAAiB1B;AACpB,GAAI,uBAAA,WAAA2B,lCAACC;AAAD,AAAS,6CAAAD,tCAACE,0BAAUhB;GAAe,AAAA,2FAAWb;AAChDA;;AACA,IAAM8B,UAAQ,cAAA,eAAIjB,fAAYkB,dAAKC;IAC7BC,UAAQ,AAACC,qDAAe,AAAA,2FAAWlC,OAAO8B;AADhD,AAEE,aAAA,qCAAA,2CAAA,+JAAA,kEAAA,8EAAA,5YAACK,6CACgCxB,6GACrB,AAAA,2FAAWX,iEACZiC,0EACIpB,yEACH,AAAA,2FAAWb;;AAPzB;;;AASFA;;;AACF,AAAI,aAAA,bAACmC,6BAAgCxB;;AAArC;;;;AAnBL,CAAA,8DAAA,9DAAMa;;AAAN","names":["reitit.frontend/query-param","q","k","vs","cljs.core/vec","reitit.frontend/query-params","uri","cljs.core.map","p1__55196#","cljs.core.juxt","cljs.core/keyword","cljs.core.into","var_args","G__55207","reitit.frontend/match-by-path","js/Error","p__55213","map__55214","cljs.core/--destructure-map","cljs.core.get","router","path","reitit.frontend.match_by_path","on-coercion-error","js/goog.Uri","coerce!","match","e55215","reitit.coercion/coerce!","e","temp__5802__auto__","reitit.core/match-by-path","cljs.core.assoc","parameters","or__5045__auto__","G__55221","reitit.frontend/match-by-name","name","reitit.frontend.match_by_name","path-params","reitit.core/match-by-name","G__55234","reitit.frontend/router","raw-routes","reitit.frontend.router","opts","reitit.core.router","cljs.core.merge","reitit.coercion/compile-request-coercers","G__55241","reitit.frontend/match-by-name!","reitit.frontend.match_by_name_BANG_","reitit.core/partial-match?","p1__55236#","cljs.core/every?","cljs.core/contains?","defined","cljs.core/keys","cljs.core/set","missing","clojure.set.difference","js/console.warn"],"sourcesContent":["(ns reitit.frontend\n  (:require [clojure.set :as set]\n            [reitit.coercion :as coercion]\n            [reitit.core :as r])\n  (:import goog.Uri\n           goog.Uri.QueryData))\n\n(defn- query-param [^QueryData q k]\n  (let [vs (.getValues q k)]\n    (if (< (alength vs) 2)\n      (aget vs 0)\n      (vec vs))))\n\n(defn query-params\n  \"Given goog.Uri, read query parameters into Clojure map.\"\n  [^Uri uri]\n  (let [q (.getQueryData uri)]\n    (->> q\n         (.getKeys)\n         (map (juxt keyword #(query-param q %)))\n         (into {}))))\n\n(defn match-by-path\n  \"Given routing tree and current path, return match with possibly\n  coerced parameters. Return nil if no match found.\n\n  :on-coercion-error - a sideeffecting fn of `match exception -> nil`\"\n  ([router path] (match-by-path router path nil))\n  ([router path {:keys [on-coercion-error]}]\n   (let [uri (.parse Uri path)\n         coerce! (if on-coercion-error\n                   (fn [match]\n                     (try (coercion/coerce! match)\n                          (catch js/Error e\n                            (on-coercion-error match e)\n                            (throw e))))\n                   coercion/coerce!)]\n     (if-let [match (r/match-by-path router (.getPath uri))]\n       (let [q (query-params uri)\n             match (assoc match :query-params q)\n             ;; Return uncoerced values if coercion is not enabled - so\n             ;; that tha parameters are always accessible from same property.\n             parameters (or (coerce! match)\n                            {:path (:path-params match)\n                             :query q})]\n         (assoc match :parameters parameters))))))\n\n(defn match-by-name\n  \"Given a router, route name and optionally path-parameters,\n  will return a Match (exact match), PartialMatch (missing path-parameters)\n  or `nil` (no match).\"\n  ([router name]\n   (match-by-name router name {}))\n  ([router name path-params]\n   (r/match-by-name router name path-params)))\n\n(defn router\n  \"Create a `reitit.core.router` from raw route data and optionally an options map.\n  Enables request coercion. See [[reitit.core/router]] for details on options.\"\n  ([raw-routes]\n   (router raw-routes {}))\n  ([raw-routes opts]\n   (r/router raw-routes (merge {:compile coercion/compile-request-coercers} opts))))\n\n(defn match-by-name!\n  \"Logs problems using console.warn\"\n  ([router name]\n   (match-by-name! router name {}))\n  ([router name path-params]\n   (if-let [match (match-by-name router name path-params)]\n     (if (r/partial-match? match)\n       (if (every? #(contains? path-params %) (:required match))\n         match\n         (let [defined (-> path-params keys set)\n               missing (set/difference (:required match) defined)]\n           (js/console.warn\n            \"missing path-params for route\" name\n            {:template (:template match)\n             :missing missing\n             :path-params path-params\n             :required (:required match)})\n           nil))\n       match)\n     (do (js/console.warn \"missing route\" name)\n         nil))))\n"]}