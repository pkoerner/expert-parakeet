{"version":3,"sources":["orga/frage_erstellen/events.cljs"],"mappings":"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","names":["re_frame.core.reg_event_db","db","_","cljs.core.assoc","cljs.core.dissoc","p__49870","vec__49871","cljs.core.nth","key","value","cljs.core/assoc-in","p__49874","vec__49879","in-answer?","choice-text","cljs.core/not","cljs.core.get_in","cljs.core.update_in","cljs.core/conj","cljs.core/disj","p__49889","vec__49890","choice","orga.frage-erstellen.events/remove-idx","v","idx","cljs.core/vec","cljs.core.concat","cljs.core.subvec","p__49908","vec__49909","choice-idx","re_frame.core.reg_event_fx","p__49946","map__49947","cljs.core/--destructure-map","cljs.core.get","typ","frage","cljs.core.apply","cljs.core/assoc","cljs.core._EQ_","multiple-choice-lsg","cljs.core/set","cljs.core.print"],"sourcesContent":["(ns orga.frage-erstellen.events\n  (:require\n    [re-frame.core :as rf]))\n\n\n(rf/reg-event-db\n  :frage-erstellen/init\n  (fn [db _]\n    (assoc db :frage {:frage/typ :frage.typ/single-choice})))\n\n\n(rf/reg-event-db\n  :frage-erstellen/entfernen\n  (fn [db _]\n    (dissoc db :frage)))\n\n\n(rf/reg-event-db\n  :frage-erstellen/update\n  (fn [db [_ key value]]\n    (assoc-in db [:frage key] value)))\n\n\n(rf/reg-event-db\n  :frage-erstellen/multiple-choice-lsg-update\n  (fn [db [_ in-answer? choice-text]]\n    (if (not (get-in db [:frage :frage/multiple-choice-loesung]))\n      (assoc-in db [:frage :frage/multiple-choice-loesung] #{choice-text})  ; init as set, in-answer must be true\n      (if in-answer?\n        (update-in db [:frage :frage/multiple-choice-loesung] conj choice-text)\n        (update-in db [:frage :frage/multiple-choice-loesung] disj choice-text)))))\n\n\n(rf/reg-event-db\n  :frage-erstellen/add-choice\n  (fn [db [_ choice]]\n    (if (not (get-in db [:frage :frage/choices]))\n      (assoc-in db [:frage :frage/choices] [choice])      ; init as vector\n      (update-in db [:frage :frage/choices] conj choice))))\n\n\n(defn remove-idx\n  [v idx]\n  (vec (concat (subvec v 0 idx) (subvec v (inc idx))))) ; removes element at idx from vector, should probably be in util namespace?\n\n\n(rf/reg-event-db\n  :frage-erstellen/remove-choice\n  (fn [db [_ choice-idx choice-text]]\n    (-> db\n        (update-in [:frage :frage/choices] remove-idx choice-idx)\n        (update-in [:frage :frage/multiple-choice-loesung] disj choice-text))))\n\n\n(rf/reg-event-fx\n  :frage-erstellen/erstellen\n  (fn [{:keys [db]} _]\n    (let [typ (get-in db [:frage :frage/typ])\n          frage\n          (apply assoc\n                 {:frage/frage-text (get-in db [:frage :frage/frage-text])\n                  :frage/punkte     (get-in db [:frage :frage/punkte])\n                  :frage/typ        typ}\n                 (cond (= typ :frage.typ/text)\n                       [:frage/loesungskriterien (get-in db [:frage :frage/loesungskriterien])]\n                       (= typ :frage.typ/single-choice)\n                       [:frage/choices (get-in db [:frage :frage/choices])\n                        :frage/single-choice-loesung (get-in db [:frage :frage/single-choice-loesung])]\n                       (= typ :frage.typ/multiple-choice)\n                       [:frage/choices (get-in db [:frage :frage/choices])\n                        :frage/multiple-choice-loesung\n                        (let [multiple-choice-lsg (get-in db [:frage :frage/multiple-choice-loesung])]\n                          (if (nil? multiple-choice-lsg)\n                            #{}\n                            (set multiple-choice-lsg)))]))] ; choices kann coll sein, mult-choi-lsg muss set!\n      (print frage))))\n\n\n"]}