{"version":3,"sources":["korrektur/events.cljs"],"mappings":"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","names":["re_frame.core.reg_event_fx","p__26027","p__26028","map__26043","cljs.core/--destructure-map","cljs.core.get","vec__26044","cljs.core.nth","db","_","antwort-id","cljs.core.assoc","vars/base-url","ajax.core/transit-response-format","re_frame.core.reg_event_db","p__26047","vec__26048","korrektur","k","cljs.core.dissoc","p__26051","vec__26052","korrektur-text","cljs.core/assoc-in","p__26057","vec__26058","korrektur-punkte","p__26061","map__26062","cljs.core.get_in","cljs.core/select-keys","korrektur-korrektor","ajax.core/transit-request-format","p__26063","vec__26064","result","p__26067","vec__26068"],"sourcesContent":["(ns korrektur.events\n  (:require\n    [ajax.core :as ajax]\n    [re-frame.core :as rf]\n    [vars]))\n\n\n(rf/reg-event-fx\n  :korrektur/laden\n  (fn [{:keys [db]} [_ antwort-id]]\n    {:db          (assoc db :laedt true)\n     :http-xhrio  {:method          :get\n                   :uri             (str vars/base-url \"/antwort-fuer-korrektur/\" antwort-id)\n                   :timeout         8000\n                   :response-format (ajax/transit-response-format)\n                   :on-success      [:korrektur/angekommen]}}))\n\n\n(rf/reg-event-db\n  :korrektur/angekommen\n  (fn [db [_ korrektur]]\n    (let [k (assoc korrektur :correction/points (str (:antwort/punkte korrektur)))]\n      (-> db\n          (assoc :laedt false)\n          (assoc :korrektur k)))))\n\n\n(rf/reg-event-db\n  :korrektur/entfernen\n  (fn [db _]\n    (dissoc db :korrektur)))\n\n\n(rf/reg-event-db\n  :korrektur/schreiben\n  (fn [db [_ korrektur-text]]\n    (assoc-in db [:korrektur :korrektur/korrektur-text] korrektur-text)))\n\n\n(rf/reg-event-db\n  :correction/points\n  (fn [db [_ korrektur-punkte]]\n    (assoc-in db [:korrektur :correction/points] korrektur-punkte)))\n\n\n(rf/reg-event-fx\n  :korrektur/senden\n  (fn [{:keys [db]} _]\n    (let [antwort-id (get-in db [:korrektur :antwort/id])\n          korrektur (select-keys (:korrektur db) [:korrektur/korrektur-text :correction/points])\n          korrektur-korrektor (assoc korrektur :korrektor/id (get-in db [:korrektor :id]))]\n      {:http-xhrio  {:method          :post\n                     :uri             (str vars/base-url \"/korrektur-fuer-antwort/\" antwort-id)\n                     :params          korrektur-korrektor\n                     :format          (ajax/transit-request-format)\n                     :response-format (ajax/transit-response-format)\n                     :on-success      [:korrektur/erfolgreich-gesendet]\n                     :on-failure      [:korrektur/nicht-gesendet]}})))\n\n\n(rf/reg-event-db\n  :korrektur/erfolgreich-gesendet\n  (fn [db [_ result]]\n    (assoc-in db [:korrektur :gesendet] result)))\n\n\n(rf/reg-event-db\n  :korrektur/nicht-gesendet\n  (fn [db [_ result]]\n    (-> db\n        (assoc :laedt false)\n        (assoc-in [:korrektur :gesendet :error] :backend-not-responding)\n        (assoc-in [:korrektur :gesendet :status] (:status result)))))\n"]}