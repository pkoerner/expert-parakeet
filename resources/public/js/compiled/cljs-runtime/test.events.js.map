{"version":3,"sources":["test/events.cljs"],"mappings":";AAOA,yDAAA,zDAACA,uHAEC,WAAAC,SAAAC;AAAA,AAAA,IAAAC,aAAAF;IAAAE,iBAAA,AAAAC,4BAAAD;SAAA,AAAAE,4CAAAF,eAAA,hEAAaK;IAAbF,aAAAJ;QAAA,AAAAK,4CAAAD,WAAA,IAAA,/DAAmBG;cAAnB,AAAAF,4CAAAD,WAAA,IAAA,rEAAqBI;AAArB,AAAA,kDAAA,+JAAA,iEAAA,2CAAA,uDAAA,mDAAA,0IAAA,2DAAA,OAAA,gQAAA,iEAAA,mFAAA,r6BACgB,iDAAA,wDAAA,zGAACC,8CAAMH,0UAEW,eAAA,dAAKI,mEAAuBF,gKAE5B,CAACG,kEAAAA,oEAAAA;;AAIrC,yDAAA,zDAACC,iIAEC,cAAAC,HAAKP;AAAL,AAAA,IAAAQ,aAAAD;QAAA,AAAAR,4CAAAS,WAAA,IAAA,/DAASP;eAAT,AAAAF,4CAAAS,WAAA,IAAA,tEAAWC;AAAX,mGACMT,9CACA,iDAAA,wDAAA,zGAACG,rDACD,qKAAA,9JAACA,kNAAYM;;AAGrB,yDAAA,zDAACH,+HAEC,WAAKN,GAAGC;AAAR,AACE,yDAAA,lDAACS,+CAAOV;;AAGZ,yDAAA,zDAACM,oIAEC,cAAAK,HAAKX;AAAL,AAAA,IAAAY,aAAAD;QAAA,AAAAZ,4CAAAa,WAAA,IAAA,/DAASX;eAAT,AAAAF,4CAAAa,WAAA,IAAA,tEAAWC;cAAX,AAAAd,4CAAAa,WAAA,IAAA,rEAAoBE;AAApB,AACE,6BAAA,mFAAA,zGAACC,mBAASf,qJAAea,iBAAUC;;AAGvC,yDAAA,zDAACR,qKAEC,cAAAU,HAAKhB;AAAL,AAAA,IAAAiB,aAAAD;QAAA,AAAAjB,4CAAAkB,WAAA,IAAA,/DAAShB;eAAT,AAAAF,4CAAAkB,WAAA,IAAA,tEAAWJ;uBAAX,AAAAd,4CAAAkB,WAAA,IAAA,9EAAoBC;kBAApB,AAAAnB,4CAAAkB,WAAA,IAAA,zEAA+BE;AAA/B,AACE,GAAI,AAACC,cAAI,kDAAA,mFAAA,rIAACC,+CAAOrB,qJAAea;AAC9B,6BAAA,mFAAA,gFAAA,zLAACE,mBAASf,qJAAea,gEAAYM;;AACrC,oBAAID;AACF,4DAAA,mFAAA,xIAACI,kDAAUtB,qJAAea,iBAAUU,eAAKJ;;AACzC,4DAAA,mFAAA,xIAACG,kDAAUtB,qJAAea,iBAAUW,eAAKL;;;;AAGjD,yDAAA,zDAAC3B,mIAEC,WAAAiC,SAAkBxB;AAAlB,AAAA,IAAAyB,aAAAD;IAAAC,iBAAA,AAAA9B,4BAAA8B;SAAA,AAAA7B,4CAAA6B,eAAA,hEAAa1B;AAAb,AAGE,cAAA,AAAA2B,VAAMC,0BAAS,sDAAA,mFAAA,zIAACC;IACVC,YAAU,AAAA,6FAAY9B;AAD5B,AAAA,kDAAA,iEAAA,2CAAA,uDAAA,oDAAA,sJAAA,kEAAA,4OAAA,gQAAA,iEAAA,mFAAA,ryBAGkC,eAAA,8DAAA,5EAAKI,mEAAuBwB,uFAC5BE,oEACA,CAACC,iEAAAA,mEAAAA,wHACD,CAAC1B,kEAAAA,oEAAAA;;AAIvC,yDAAA,zDAACC,gKAEC,WAAKN,GAAGC;AAAR,AACE,wDAAA,6DAAA,9GAACE,8CAAMH","names":["re_frame.core.reg_event_fx","p__26071","p__26072","map__26073","cljs.core/--destructure-map","cljs.core.get","vec__26074","cljs.core.nth","db","_","test-id","cljs.core.assoc","vars/base-url","ajax.core/transit-response-format","re_frame.core.reg_event_db","p__26079","vec__26080","test","cljs.core.dissoc","p__26086","vec__26087","frage-id","antwort","cljs.core/assoc-in","p__26094","vec__26096","in-answer?","choice-text","cljs.core/not","cljs.core.get_in","cljs.core.update_in","cljs.core/conj","cljs.core/disj","p__26112","map__26113","cljs.core/deref","user-id","re_frame.core.subscribe","antworten","ajax.core/transit-request-format"],"sourcesContent":["(ns test.events\n  (:require\n    [ajax.core :as ajax]\n    [re-frame.core :as rf]\n    [vars]))\n\n\n(rf/reg-event-fx\n  :test/laden\n  (fn [{:keys [db]} [_ test-id]]\n    {:db          (assoc db :laedt true)\n     :http-xhrio  {:method          :get\n                   :uri             (str vars/base-url \"/test/\" test-id)\n                   :timeout         8000\n                   :response-format (ajax/transit-response-format)\n                   :on-success      [:test/angekommen]}}))\n\n\n(rf/reg-event-db\n  :test/angekommen\n  (fn [db [_ test]]\n    (-> db\n        (assoc :laedt false)\n        (assoc :test test))))\n\n\n(rf/reg-event-db\n  :test/entfernen\n  (fn [db _]\n    (dissoc db :test)))\n\n\n(rf/reg-event-db\n  :frage/beantworten\n  (fn [db [_ frage-id antwort]]\n    (assoc-in db [:antworten frage-id] antwort)))\n\n\n(rf/reg-event-db\n  :frage/multiple-choice-beantworten\n  (fn [db [_ frage-id in-answer? choice-text]]\n    (if (not (get-in db [:antworten frage-id]))\n      (assoc-in db [:antworten frage-id] #{choice-text})  ; init antwort as set, in-answer? must be true if antwort is not initialised\n      (if in-answer?\n        (update-in db [:antworten frage-id] conj choice-text)\n        (update-in db [:antworten frage-id] disj choice-text)))))\n\n\n(rf/reg-event-fx\n  :antworten/senden\n  (fn [{:keys [db]} _]\n    ;; TODO: should use an interceptor that injects subscriptoins for user-id\n    ;; and antworten\n    (let [user-id @(rf/subscribe [:user-id])\n          antworten (:antworten db)]\n      {:http-xhrio  {:method          :post\n                     :uri             (str vars/base-url \"/user/\" user-id \"antworten\")\n                     :params          antworten\n                     :format          (ajax/transit-request-format)\n                     :response-format (ajax/transit-response-format)\n                     :on-success      [:antworten/erfolgreich-gesendet]}})))\n\n\n(rf/reg-event-db\n  :antworten/erfolgreich-gesendet\n  (fn [db _]\n    (assoc db :gesendet true)))\n\n"]}