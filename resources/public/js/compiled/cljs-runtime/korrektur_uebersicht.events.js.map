{"version":3,"sources":["korrektur_uebersicht/events.cljs"],"mappings":";AAOA,yDAAA,zDAACA,qMAEC,WAAAC,SAAkBK;AAAlB,AAAA,IAAAJ,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;SAAA,AAAAE,4CAAAF,eAAA,hEAAaG;AAAb,AAAA,kDAAA,+JAAA,iEAAA,2CAAA,uDAAA,mDAAA,sYAAA,2DAAA,OAAA,gQAAA,iEAAA,mFAAA,jqCACgB,iDAAA,wDAAA,zGAACE,8CAAMF,0UAEW,eAAA,dAAKG,wEAA4B,kDAAA,mFAAA,+DAAA,pMAACC,+CAAOJ,wWAEzC,CAACK,kEAAAA,oEAAAA;;AAIrC,yDAAA,zDAACC,+MAEC,cAAAC,HAAKP;AAAL,AAAA,IAAAQ,aAAAD;QAAA,AAAAE,4CAAAD,WAAA,IAAA,/DAASP;YAAT,AAAAQ,4CAAAD,WAAA,IAAA,nEAAWE;AAAX,mGACMV,9CACA,iDAAA,wDAAA,zGAACE,rDACD,qKAAA,9JAACA,wPAA8BQ;;AAGvC,yDAAA,zDAACJ,6MAEC,WAAKN,GAAGC;AAAR,AACE,yDAAA,lDAACU,+CAAOX;;AAGZ,yDAAA,zDAACL,iMAEC,WAAAiB,SAAkBX;AAAlB,AAAA,IAAAY,aAAAD;IAAAC,iBAAA,AAAAf,4BAAAe;SAAA,AAAAd,4CAAAc,eAAA,hEAAab;AAAb,AAAA,kDAAA,+JAAA,iEAAA,2CAAA,uDAAA,mDAAA,kZAAA,2DAAA,OAAA,gQAAA,iEAAA,mFAAA,7qCACgB,iDAAA,wDAAA,zGAACE,8CAAMF,0UAEW,eAAA,dAAKG,oFAAwC,kDAAA,mFAAA,+DAAA,pMAACC,+CAAOJ,wWAErD,CAACK,kEAAAA,oEAAAA;;AAIrC,yDAAA,zDAACC,2MAEC,cAAAQ,HAAKd;AAAL,AAAA,IAAAe,aAAAD;QAAA,AAAAL,4CAAAM,WAAA,IAAA,/DAASd;YAAT,AAAAQ,4CAAAM,WAAA,IAAA,nEAAWL;AAAX,mGACMV,9CACA,iDAAA,wDAAA,zGAACE,rDACD,qKAAA,9JAACA,mPAA4BQ;;AAGrC,yDAAA,zDAACJ,yMAEC,WAAKN,GAAGC;AAAR,AACE,yDAAA,lDAACU,+CAAOX","names":["re_frame.core.reg_event_fx","p__49499","map__49501","cljs.core/--destructure-map","cljs.core.get","db","_","cljs.core.assoc","vars/base-url","cljs.core.get_in","ajax.core/transit-response-format","re_frame.core.reg_event_db","p__49508","vec__49510","cljs.core.nth","daten","cljs.core.dissoc","p__49521","map__49522","p__49527","vec__49528"],"sourcesContent":["(ns korrektur-uebersicht.events\n  (:require\n    [ajax.core :as ajax]\n    [re-frame.core :as rf]\n    [vars]))\n\n\n(rf/reg-event-fx\n  :korrektur-uebersicht/hole-unkorrigierte-antworten\n  (fn [{:keys [db]} _]\n    {:db          (assoc db :laedt true)\n     :http-xhrio  {:method          :get\n                   :uri             (str vars/base-url \"/korrektur/\" (get-in db [:korrektor :id]))\n                   :timeout         8000\n                   :response-format (ajax/transit-response-format)\n                   :on-success      [:korrektur-uebersicht/speichere-unkorrigierte-antworten]}}))\n\n\n(rf/reg-event-db\n  :korrektur-uebersicht/speichere-unkorrigierte-antworten\n  (fn [db [_ daten]]\n    (-> db\n        (assoc :laedt false)\n        (assoc :antworten-unkorrigiert daten))))\n\n\n(rf/reg-event-db\n  :korrektur-uebersicht/entferne-unkorrigierte-antworten\n  (fn [db _]\n    (dissoc db :antworten-unkorrigiert)))\n\n\n(rf/reg-event-fx\n  :korrektur-uebersicht/hole-korrigierte-antworten\n  (fn [{:keys [db]} _]\n    {:db          (assoc db :laedt true)\n     :http-xhrio  {:method          :get\n                   :uri             (str vars/base-url \"/bisherige-korrekturen/\" (get-in db [:korrektor :id]))\n                   :timeout         8000\n                   :response-format (ajax/transit-response-format)\n                   :on-success      [:korrektur-uebersicht/speichere-korrigierte-antworten]}}))\n\n\n(rf/reg-event-db\n  :korrektur-uebersicht/speichere-korrigierte-antworten\n  (fn [db [_ daten]]\n    (-> db\n        (assoc :laedt false)\n        (assoc :antworten-korrigiert daten))))\n\n\n(rf/reg-event-db\n  :korrektur-uebersicht/entferne-korrigierte-antworten\n  (fn [db _]\n    (dissoc db :antworten-korrigiert)))\n"]}