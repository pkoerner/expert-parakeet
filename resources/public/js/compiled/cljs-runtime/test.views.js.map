{"version":3,"sources":["test/views.cljs"],"mappings":"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","names":["test.views/textfrage-beantworten-body","frage-id","initial","antwort-in-db-fkt","antwort","reagent.core.atom","re-com.core/v-box","js/goog.DEBUG","re-com.core/input-textarea","val","cljs.core/reset!","test.views/single-choice-beantworten-body","choices","cljs.core.mapv","choice-idx","choice-text","re-com.core/radio-button","cljs.core.range","cljs.core/count","test.views/multiple-choice-beantworten-body","model","cljs.core/contains?","re-com.core/checkbox","test.views/Questions","cljs.core.conj","cljs.core/deref","frage","re-com.core/title","save-ans-to-db-fkt","re-frame.core/dispatch","cljs.core._EQ_","cljs.core/shuffle","in-answer?","re_frame.core.subscribe","re-com.core/gap","re-com.core/button","test.views/Corrections","c","test.views/Root","re-com.core/box","re-com.core/line","re-com.core/throbber"],"sourcesContent":["(ns test.views\n  (:require\n    [re-com.core :refer [at v-box box gap button input-textarea line title radio-button checkbox throbber]]\n    [re-frame.core :as rf]\n    [reagent.core :as reagent]\n    [test.events]))\n\n\n(defn textfrage-beantworten-body\n  [frage-id initial antwort-in-db-fkt]\n  (let [antwort (reagent/atom initial)]\n    [v-box\n     :src (at)\n     :attr {:key (str frage-id)}\n     :gap \"5px\"\n     :children\n     [[input-textarea\n       :src (at)\n       :model antwort\n       :placeholder \"Der Sinn des Lebens ist 42 weil...\"\n       ;; :change-on-blur? false\n       :on-change (fn [val]\n                    (antwort-in-db-fkt val)\n                    (reset! antwort val))]]]))\n\n\n(defn single-choice-beantworten-body\n  [frage-id choices initial antwort-in-db-fkt]\n  (let [antwort (reagent/atom initial)]\n    [v-box :src (at)\n     :attr {:key (str frage-id)}\n     :gap \"5px\"\n     :children\n     (mapv\n       (fn [choice-idx choice-text]\n         [radio-button :src (at)\n          :attr {:key (str choice-idx)}\n          :label choice-text\n          :value choice-text\n          :model antwort\n          :on-change (fn [val]\n                       (antwort-in-db-fkt val)\n                       (reset! antwort val))])\n       (range (count choices)) choices)]))\n\n\n(defn multiple-choice-beantworten-body\n  [frage-id choices initial antwort-in-db-fkt]\n  [v-box :src (at)\n   :attr {:key (str frage-id)}\n   :gap \"5px\"\n   :children\n   (mapv\n     (fn [choice-idx choice-text]\n       (let [model (reagent/atom (contains? initial choice-text))]\n         [checkbox :src (at)\n          :model model\n          :attr {:key choice-idx}\n          :label choice-text\n          :on-change (fn [val]\n                       (reset! model val)\n                       (antwort-in-db-fkt val choice-text))]))\n     (range (count choices)) choices)])\n\n\n(defn Questions\n  []\n  (fn []\n    [v-box\n     :src (at)\n     :children\n     (conj\n       (mapv\n         (fn [frage]\n           [v-box :src (at)\n            :children\n            [[title :src (at)\n              :label (str (:frage/frage-text frage) \" - \" (:frage/punkte frage) \" Punkte\")\n              :level :level2]\n             (let [save-ans-to-db-fkt\n                   (fn [antwort] (rf/dispatch [:frage/beantworten (:frage/id frage) antwort]))]\n               (cond\n                 (= (:frage/typ frage) :frage.typ/text)\n                 (textfrage-beantworten-body (:frage/id frage) \"\" save-ans-to-db-fkt) ; \"\" is initial value\n                 (= (:frage/typ frage) :frage.typ/single-choice)\n                 (single-choice-beantworten-body (:frage/id frage) (shuffle (:frage/choices frage))\n                                                 nil save-ans-to-db-fkt)\n                 (= (:frage/typ frage) :frage.typ/multiple-choice)\n                 (multiple-choice-beantworten-body\n                   (:frage/id frage) (shuffle (:frage/choices frage)) #{}\n                   (fn [in-answer? choice-text]\n                     (rf/dispatch [:frage/multiple-choice-beantworten (:frage/id frage) in-answer? choice-text])))\n                 :else [:label \"Fragentyp nicht implementiert\"]))]])\n         @(rf/subscribe [:fragen]))\n       [gap\n        :size \"10px\"]\n       [button\n        :src (at)\n        :class \"button-primary\"\n        :on-click #(rf/dispatch [:antworten/senden])\n        :disabled? (rf/subscribe [:antworten/gesendet])\n        :label \"Abschicken\"])]))\n\n\n;; not in use\n;; for debugging\n(defn Corrections\n  []\n  [v-box\n   :children\n   (mapv (fn [c]\n           [title :label (str \"Correction: \" c)\n            :level :level2])\n         @(rf/subscribe [:corrections]))])\n\n\n(defn Root\n  []\n  [box\n   :padding \"15px\"\n   :child\n   [v-box\n    :size \"auto\"\n    :gap \"15px\"\n    :children\n    [[title :label \"Test\" :level :level1]\n     [line]\n     (if @(rf/subscribe [:laedt])\n       [throbber]\n       [Questions])]]])\n\n\n"]}