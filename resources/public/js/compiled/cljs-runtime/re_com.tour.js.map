{"version":3,"sources":["re_com/tour.cljs"],"mappings":"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","names":["re-com.tour/make-tour","tour-spec","tour-map","cljs.core.atom","p1__52454#","p2__52455#","cljs.core.reduce","cljs.core.assoc","reagent.core.atom","re-com.tour/initialise-tour","tour","cljs.core.doall","iter__5523__auto__","s__52471","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","cljs.core/count","b__52473","cljs.core/chunk-buffer","i__52472","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__52470","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","step","cljs.core/reset!","re-com.tour/start-tour","fexpr__52496","re-com.tour/finish-tour","re-com.tour/next-tour-step","cljs.core/deref","steps","old-step","new-step","fexpr__52501","cljs.core.nth","fexpr__52503","re-com.tour/prev-tour-step","fexpr__52517","fexpr__52519","re-com.tour/make-tour-nav","on-first-button","cljs.core._EQ_","on-last-button","cljs.core.merge","re-com.box/flex-child-style","re-com.buttons/button","js/goog.DEBUG","event","cljs.core/chunk-first"],"sourcesContent":["(ns re-com.tour\n  (:require-macros\n    [re-com.core    :refer [handler-fn at]])\n  (:require\n    [reagent.core   :as    reagent]\n    [re-com.box     :refer [flex-child-style]]\n    [re-com.buttons :refer [button]]))\n\n\n;;--------------------------------------------------------------------------------------------------\n;; Component: tour\n;;\n;;   Strings together\n;;--------------------------------------------------------------------------------------------------\n\n(defn make-tour\n  \"Returns a map containing\n  - A reagent atom for each tour step controlling popover show/hide (boolean)\n  - A standard atom holding the current step (integer)\n  - A copy of the steps parameter passed in, to determine the order for prev/next functions\n  It sets the first step atom to true so that it will be initially shown\n  Sample return value:\n  {:steps [:step1 :step2 :step3]\n  :current-step (atom 0)\n  :step1 (reagent/atom true)\n  :step2 (reagent/atom false)\n  :step3 (reagent/atom false)}\"\n  [tour-spec]\n  (let [tour-map {:current-step (atom 0) :steps tour-spec}] ;; Only need normal atom\n\n    (reduce #(assoc %1 %2 (reagent/atom false)) tour-map tour-spec))) ;; Old way: (merge {} (map #(hash-map % (reagent/atom false)) tour-spec))\n\n\n(defn- initialise-tour\n  \"Resets all poover atoms to false\"\n  [tour]\n  (doall (for [step (:steps tour)] (reset! (step tour) false))))\n\n\n(defn start-tour\n  \"Sets the first popover atom in the tour to true\"\n  [tour]\n  (initialise-tour tour)\n  (reset! (:current-step tour) 0)\n  (reset! ((first (:steps tour)) tour) true))\n\n\n(defn finish-tour\n  \"Closes all tour popovers\"\n  [tour]\n  (initialise-tour tour))\n\n\n(defn- next-tour-step\n  [tour]\n  (let [steps     (:steps tour)\n        old-step  @(:current-step tour)\n        new-step  (inc old-step)]\n    (when (< new-step (count (:steps tour)))\n      (reset! (:current-step tour) new-step)\n      (reset! ((nth steps old-step) tour) false)\n      (reset! ((nth steps new-step) tour) true))))\n\n\n(defn- prev-tour-step\n  [tour]\n  (let [steps    (:steps tour)\n        old-step @(:current-step tour)\n        new-step (dec old-step)]\n    (when (>= new-step 0)\n      (reset! (:current-step tour) new-step)\n      (reset! ((nth steps old-step) tour) false)\n      (reset! ((nth steps new-step) tour) true))))\n\n\n(defn make-tour-nav\n  \"Generate the hr and previous/next buttons markup.\n  If first button in tour, don't generate a Previous button.\n  If last button in tour, change Next button to a Finish button\"\n  [tour]\n  (let [on-first-button (= @(:current-step tour) 0)\n        on-last-button  (= @(:current-step tour) (dec (count (:steps tour))))]\n    [:div\n     [:hr {:style (merge (flex-child-style \"none\")\n                         {:margin \"10px 0px 10px\"})}]\n     (when-not on-first-button\n       [button\n        :src      (at)\n        :label    \"Previous\"\n        :on-click (handler-fn (prev-tour-step tour))\n        :style    {:margin-right \"15px\"}\n        :class     \"btn-default rc-tour-btn-previous\"])\n     [button\n      :src      (at)\n      :label    (if on-last-button \"Finish\" \"Next\")\n      :on-click (handler-fn (if on-last-button\n                              (finish-tour tour)\n                              (next-tour-step tour)))\n      :class    (str \"btn-default \" (if on-last-button \"rc-tour-btn-finish\" \"rc-tour-btn-next\"))]]))\n"]}