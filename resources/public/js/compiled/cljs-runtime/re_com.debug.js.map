{"version":3,"sources":["re_com/debug.cljs"],"mappings":"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","names":["re-com.debug/short-component-name","component-name","clojure.string.split","cljs.core/last","clojure.string/replace","re-com.debug/loggable-args","args","cljs.core/map?","cljs.core.dissoc","cljs.core.remove","cljs.core.comp","cljs.core/nil?","cljs.core/second","cljs.core.into","p__50164","map__50175","cljs.core/--destructure-map","cljs.core.get","re-com.debug/->attr","src","debug-as","cljs.core/not","re-com.config/debug?","map__50185","rc-component","or__5045__auto__","reagent.impl.component/component-name","reagent.core/current-component","rc-args","ref-fn","el","re_com.debug.goog$module$goog$object.set","temp__5804__auto__","user-ref-fn","cljs.core.get_in","cljs.core/fn?","file","line","G__50197","cljs.core.assoc","var_args","G__50202","re-com.debug/component-stack","js/Error","re_com.debug.component_stack","stack","component","parent","cljs.core._EQ_","cljs.core.conj","re_com.debug.goog$module$goog$object.get","re-com.debug/validate-args-problems-style","re-com.debug/h1-style","re-com.debug/h2-style","re-com.debug/code-style","re-com.debug/error-style","re-com.debug/index-style","re-com.debug/collision-icon","re-com.debug/gear-icon","re-com.debug/blue-book-icon","re-com.debug/confused-icon","re-com.debug/globe-icon","re-com.debug/log-component-stack","js/console.groupCollapsed","seq__50223","cljs.core/seq","chunk__50224","count__50225","i__50226","map__50286","cljs.core/chunked-seq?","c__5568__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","map__50308","cljs.core/first","cljs.core/next","i","p1__50221#","p2__50220#","cljs.core.map_indexed","vec__50289","cljs.core.nth","vec__50321","js/console.log","js/console.groupEnd","re-com.debug/log-validate-args-error-problems","problems","seq__50336","chunk__50337","count__50338","i__50339","map__50367","map__50389","problem","arg-name","expected","actual","validate-fn-result","G__50370","cljs.core/Keyword","G__50393","p__50402","map__50404","re-com.debug/log-validate-args-error","element","source-url","cljs.core/empty?","re-com.config/root-url-for-compiler-output","js/console.group","cljs.core/deref","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","re-com.debug/validate-args-error","p__50431","map__50433","seq50423","self__5755__auto__","cljs.core.atom","cljs.core/reset!","internal-problems","internal-component","internal-args","reagent.core.create_class","this","argv","old-state","snapshot","p__50439","map__50443","cljs.core.merge","re-com.debug/stack-spy","p__50469","map__50473","seq50452","log-fn","first-child","p__50478","map__50479"],"sourcesContent":["(ns re-com.debug\n  (:require\n    [goog.object            :as    gobj]\n    [cljs.reader            :refer [read-string]]\n    [clojure.string         :as    string]\n    [reagent.core           :as    r]\n    [reagent.impl.component :as    component]\n    [re-com.config          :refer [debug? root-url-for-compiler-output]]))\n\n(defn short-component-name\n  \"Returns the interesting part of component-name\"\n  [component-name]\n  ;; reagent.impl.component/component-name is used to obtain the component name, which returns\n  ;; e.g. re_com.checkbox.checkbox. We are only interested in the last part.\n  ;;\n  ;; Also some components are form-2 or form-3 so will return -return from the anonymous render\n  ;; function name. We keep the -render in the anonymous function name for JavaScript stack\n  ;; traces for non-validation errors (i.e. exceptions), but we are not interested in that here.\n  (-> component-name\n      (string/split #\"\\.\")\n      (last)\n      (string/replace #\"_render\" \"\")\n      (string/replace #\"_\" \"-\")))\n\n(defn loggable-args\n  \"Return a version of args which is stripped of uninteresting values, suitable for logging.\"\n  [args]\n  (if (map? args)\n    (->> ;; Remove args already represented in component hierarchy\n      (dissoc args :src :child :children :panel-1 :panel-2 :debug-as)\n      ;; Remove args with nil value\n      (remove (comp nil? second))\n      (into {}))\n    args))\n\n(defn ->attr\n  [{:keys [src debug-as] :as args}]\n  (if-not debug? ;; This is in a separate `if` so Google Closure dead code elimination can run...\n    {}\n    (let [rc-component        (or (:component debug-as)\n                                  (short-component-name (component/component-name (r/current-component))))\n          rc-args             (loggable-args\n                                (or (:args debug-as)\n                                    args))\n          ref-fn              (fn [^js/Element el]\n                                ;; If the ref callback is defined as an inline function, it will get called twice during updates,\n                                ;; first with null and then again with the DOM element.\n                                ;;\n                                ;; See: 'Caveats with callback refs' at\n                                ;; https://reactjs.org/docs/refs-and-the-dom.html#caveats-with-callback-refs\n                                (when el\n                                  ;; Remember args so they can be logged later:\n                                  (gobj/set el \"__rc-args\" rc-args))\n                                ;; User may have supplied their own ref like so: {:attr {:ref (fn ...)}}\n                                (when-let [user-ref-fn (get-in args [:attr :ref])]\n                                  (when (fn? user-ref-fn)\n                                    (user-ref-fn el))))\n          {:keys [file line]} src]\n      (cond->\n        {:ref     ref-fn\n         :data-rc rc-component}\n        src\n        (assoc :data-rc-src (str file \":\" line))))))\n\n(defn component-stack\n  ([el]\n   (component-stack [] el))\n  ([stack ^js/Element el]\n   (if-not el ;; termination condition\n     stack\n     (let [component          (.. el -dataset -rc)\n           ^js/Element parent (.-parentElement el)]\n       (->\n         (if (= \"stack-spy\" component)\n           stack\n           (conj stack\n                 {:el        el\n                  :src       (.. el -dataset -rcSrc)\n                  :component component\n                  :args      (gobj/get el \"__rc-args\")}))\n         (component-stack parent))))))\n\n(defn validate-args-problems-style\n  []\n  ;; [IJ] TODO: take min-width, min-height, height, width, size etc from valid args if present; w/ a floor for min-width/min-height\n  ;; [IJ] TODO: verify flexbox support in all cases.\n  {:min-width      \"32px\"\n   :min-height     \"32px\"\n   :font-size      \"1.4em\"\n   :text-align     \"center\"\n   :vertical-align \"center\"\n   :background      \"#FF4136\"})\n\n(def h1-style \"background: #FF4136; color: white; font-size: 1.4em; padding: 3px\")\n(def h2-style \"background: #0074D9; color: white; padding: 0.25em\")\n(def code-style \"font-family: monospace; font-weight: bold; background: #eee; color: #333; padding: 3px\")\n(def error-style \"font-weight: bold\")\n(def index-style \"font-weight: bold; font-size: 1.1em\")\n\n(def collision-icon \"\\uD83D\\uDCA5\")\n(def gear-icon \"\u2699\ufe0f\") ;; the trailing 'space' is an intentional modifier, not an actual space, so do not delete it!\n(def blue-book-icon \"\\uD83D\\uDCD8\")\n(def confused-icon \"\\uD83D\\uDE15\")\n(def globe-icon \"\\uD83C\\uDF10\")\n\n(defn log-component-stack\n  [stack]\n  (js/console.groupCollapsed (str \"\u2022 %c Component stack (click me)\") h2-style)\n  (doseq [{:keys [i el component src args]} (map-indexed #(assoc %2 :i (inc %1)) stack)]\n    (if component\n      (if src\n        (let [[file line] (string/split src #\":\")]\n          (if args\n            (js/console.log\n              (str \"%c\" i \"%c \" gear-icon \" %c[\" component \" ...]%c in file %c\" file \"%c at line %c\" line \"%c\\n      Parameters: %O\\n      DOM: %o\")\n              index-style \"\" code-style \"\" code-style \"\" code-style \"\" args el)\n            (js/console.log\n              (str \"%c\" i \"%c \" gear-icon \" %c[\" component \" ...]%c in file %c\" file \"%c at line %c\" line \"%c\\n      DOM: %o\")\n              index-style \"\" code-style \"\" code-style \"\" code-style \"\" el)))\n        (js/console.log\n          (str \"%c\" i \"%c \" gear-icon \" %c[\" component \" ...]%c\\n      Parameters: %O\\n      DOM: %o\")\n          index-style \"\" code-style \"\" args el))\n      (js/console.log (str \"%c\" i \"%c \" globe-icon \" %o\") index-style \"\" el)))\n  (js/console.groupEnd))\n\n(defn log-validate-args-error-problems\n  [problems]\n  (doseq [{:keys [problem arg-name expected actual validate-fn-result]} problems]\n    (case problem\n      ;; [IJ] TODO: :validate-fn-return\n      :unknown         (js/console.log\n                         (str \"\u2022 %cUnknown parameter: %c\" arg-name)\n                         error-style code-style)\n      :required        (js/console.log\n                         (str \"\u2022 %cMissing required parameter: %c\" arg-name)\n                         error-style code-style)\n      :validate-fn     (js/console.log\n                         (str \"\u2022 %cParameter %c\" arg-name \"%c expected %c\" (:type expected ) \"%c but got %c\" actual)\n                         error-style code-style error-style code-style error-style code-style)\n      :validate-fn-map (js/console.log\n                         (str \"\u2022 %c\" (:message validate-fn-result))\n                         error-style)\n      (js/console.log \"\u2022 \" confused-icon \" Unknown problem reported\"))))\n\n(defn log-validate-args-error\n  [element problems component-name {:keys [file line] :as src}]\n  (let [source-url    (when (not (empty? root-url-for-compiler-output)) (str root-url-for-compiler-output file \":\" line))]\n    (js/console.group (str \"%c\" collision-icon \" re-com validation error \") h1-style)\n    (if src\n      (if source-url\n        (js/console.log\n          (str \"\u2022 \" gear-icon \"%c[\" (short-component-name component-name) \" ...]%c in file %c\" file \"%c at line %c\" line \"%c see \" source-url)\n          code-style \"\" code-style \"\" code-style \"\")\n        (do\n          (js/console.log\n            (str \"\u2022 \" gear-icon \"%c[\" (short-component-name component-name) \" ...]%c in file %c\" file \"%c at line %c\" line)\n            code-style \"\" code-style \"\" code-style)\n          (js/console.log\n            (str \"\u2022 \" blue-book-icon \" Add %cre-com.config/root-url-for-compiler-output%c to your %c:closure-defines%c to enable clickable source urls\")\n            code-style \"\" code-style \"\")))\n      (do\n        (js/console.log\n          (str \"\u2022 \" gear-icon \"%c[\" (short-component-name component-name) \" ...]\")\n          code-style)\n        (js/console.log (str \"\u2022 \" blue-book-icon \" Learn how to add source coordinates to your components at https://re-com.day8.com.au/#/debug\"))))\n    (log-validate-args-error-problems problems)\n    (log-component-stack (component-stack @element))\n    (js/console.groupEnd)))\n\n(defn validate-args-error\n  [& {:keys [problems component args]}]\n  (let [element            (atom nil)\n        ref-fn             (fn [el]\n                             (when el\n                               (reset! element el)))\n        internal-problems  (atom problems)\n        internal-component (atom component)\n        internal-args      (atom args)]\n    (r/create-class\n      {:display-name \"validate-args-error\"\n\n       :component-did-mount\n       (fn [this]\n         (log-validate-args-error element @internal-problems @internal-component (:src @internal-args)))\n\n       :component-did-update\n       (fn [this argv old-state snapshot]\n         (log-validate-args-error element @internal-problems @internal-component (:src @internal-args)))\n\n       :reagent-render\n       (fn [& {:keys [problems component args]}]\n         (reset! internal-problems problems)\n         (reset! internal-component component)\n         (reset! internal-args args)\n         [:div\n          (merge\n            (->attr {:src      (:src args)\n                     :debug-as {:component component\n                                :args      args}\n                     :attr     {:ref ref-fn}})  ;; important that this ref-fn doesn't get overridden by (->attr ...)\n            {:title    \"re-com validation error. Look in the DevTools console.\"\n             :style    (validate-args-problems-style)})\n\n          collision-icon])})))\n\n(defn stack-spy\n  [& {:keys [component src]}]\n  (let [element (atom nil)\n        ref-fn  (fn [el]\n                  ;; If the ref callback is defined as an inline function, it will get called twice during updates,\n                  ;; first with null and then again with the DOM element.\n                  ;;\n                  ;; See: 'Caveats with callback refs' at\n                  ;; https://reactjs.org/docs/refs-and-the-dom.html#caveats-with-callback-refs\n                  (when el\n                    (reset! element el)))\n        log-fn  (fn []\n                  (let [el @element]\n                    (when el\n                      (let [first-child (first (.-children el))]\n                        (js/console.group \"%c[stack-spy ...]\" code-style)\n                        (log-component-stack (component-stack first-child))\n                        (js/console.groupEnd)))))]\n    (r/create-class\n      {:display-name         \"stack-spy\"\n       :component-did-mount  log-fn\n       :component-did-update log-fn\n       :reagent-render\n       (fn [& {:keys [component src]}]\n         [:div\n          (->attr {:src src :attr {:ref ref-fn}}) ;; important that this ref-fn doesn't get overridden by (->attr ...)\n          component])})))\n"]}