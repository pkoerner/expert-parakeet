{"version":3,"sources":["orga/frage_erstellen/views.cljs"],"mappings":"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","names":["orga.frage-erstellen.views/fragentyp-auswaehlen","tabs","frage-typ","reagent.core.atom","re-com.core/h-box","re-com.core/title","js/goog.DEBUG","re-com.core/horizontal-bar-tabs","typ","cljs.core/reset!","re-frame.core/dispatch","orga.frage-erstellen.views/frage-text-input","frage-text","re-com.core/input-text","val","orga.frage-erstellen.views/punkte-input","punkte","orga.frage-erstellen.views/choices-list","re-com.core/v-box","cljs.core/deref","choices","re_frame.core.subscribe","cljs.core.mapv","choice-idx","choice-text","re-com.core/label","re-com.core/md-icon-button","cljs.core.range","cljs.core/count","orga.frage-erstellen.views/add-new-choice","current-choice-text-atom","js/document","orga.frage-erstellen.views/choice-hinzufuegen","p1__27264#","current-choice-text","e","cljs.core._EQ_","orga.frage-erstellen.views/single-choice-erstellen","test.views/single-choice-beantworten-body","antwort","orga.frage-erstellen.views/multiple-choice-erstellen","test.views/multiple-choice-beantworten-body","in-answer?","orga.frage-erstellen.views/text-frage-erstellen","test.views/textfrage-beantworten-body","orga.frage-erstellen.views/can-erstellen?","frage","and__5043__auto__","cljs.core/seq","orga.frage-erstellen.views/frage-erstellen","re-com.core/line","re-com.core/button","cljs.core/not"],"sourcesContent":["(ns orga.frage-erstellen.views\n  (:require\n    [orga.frage-erstellen.events]\n    [orga.frage-erstellen.sub]\n    [re-com.core :as rc :refer [at v-box h-box]]\n    [re-frame.core :as rf]\n    [reagent.core :as reagent]\n    [test.views :refer [single-choice-beantworten-body multiple-choice-beantworten-body textfrage-beantworten-body]]))\n\n\n(defn fragentyp-auswaehlen\n  []\n  (let [tabs [{:id :frage.typ/single-choice :label \"single choice\"}\n              {:id :frage.typ/multiple-choice :label \"multiple choice\"}\n              {:id :frage.typ/text :label \"text\"}]\n        frage-typ (reagent/atom :frage.typ/single-choice)]\n    [h-box\n     :align :center\n     :gap \"10px\"\n     :children\n     [[rc/title :src (at)\n       :level :level2\n       :label \"Fragentyp:\"]\n      [rc/horizontal-bar-tabs :src (at)\n       :model frage-typ\n       :tabs tabs\n       :on-change (fn [typ]\n                    (reset! frage-typ typ)\n                    (rf/dispatch [:frage-erstellen/update :frage/typ typ]))]]]))\n\n\n(defn frage-text-input\n  []\n  [h-box :src (at)\n   :align :center\n   :gap \"10px\"\n   :children\n   [[rc/title :src (at)\n     :level :level2\n     :label \"Frage:\"]\n    (let [frage-text (reagent/atom nil)]\n      [rc/input-text :src (at)\n       :model frage-text\n       :width \"300px\"\n       :on-change (fn [val]\n                    (reset! frage-text val)\n                    (rf/dispatch [:frage-erstellen/update :frage/frage-text val]))])]])\n\n\n(defn punkte-input\n  []\n  [h-box :src (at)\n   :align :center\n   :gap \"10px\"\n   :children\n   [[rc/title :src (at)\n     :level :level2\n     :label \"Punkte:\"]\n    (let [punkte (reagent/atom \"\")]\n      [rc/input-text :src (at)\n       :model punkte\n       :validation-regex #\"^([0-9]*)$\"\n       :width \"300px\"\n       :on-change (fn [val]\n                    (reset! punkte val)\n                    (rf/dispatch [:frage-erstellen/update :frage/punkte val]))])]])\n\n\n(defn choices-list\n  []\n  [v-box :src (at)\n   :children\n   [[rc/title :src (at)\n     :level :level2\n     :label \"Auswahlm\u00f6glichkeiten:\"]\n    [v-box :src (at)\n     :gap \"5px\"\n     :children\n     (let [choices @(rf/subscribe [:frage-erstellen/choices])]\n       (mapv\n         (fn [choice-idx choice-text]\n           [h-box :src (at)\n            :attr {:key choice-idx}\n            :gap \"10px\"\n            :children\n            [[rc/label :label (str \"- \" choice-text)]\n             [rc/md-icon-button :src (at)\n              :md-icon-name \"zmdi-minus\"\n              :emphasise? true\n              :on-click #(rf/dispatch [:frage-erstellen/remove-choice choice-idx choice-text])]]])\n         (range (count choices)) choices))]]])\n\n\n(defn add-new-choice\n  [current-choice-text-atom]\n  (rf/dispatch [:frage-erstellen/add-choice @current-choice-text-atom])\n  (reset! current-choice-text-atom \"\")\n  (. (. js/document (getElementById \"add-choice-inp\")) focus))\n\n\n(defn choice-hinzufuegen\n  []\n  (let [current-choice-text (reagent/atom \"\")]\n    [h-box :src (at)\n     :attr {:key \"add choice\"}\n     :align :center\n     :gap \"10px\"\n     :children\n     [[rc/input-text :src (at)\n       :attr {:id           \"add-choice-inp\"\n              :on-key-press (fn [e]\n                              (when (= 13 (.-charCode e)) ; enter\n                                (add-new-choice current-choice-text)))}\n       :model current-choice-text\n       :width \"300px\"\n       :change-on-blur? false\n       :on-change #(reset! current-choice-text %)]\n      [rc/md-icon-button :src (at)\n       :md-icon-name \"zmdi-plus\"\n       :emphasise? true\n       :on-click #(add-new-choice current-choice-text)]]]))\n\n\n(defn single-choice-erstellen\n  []\n  [v-box :src (at)\n   :gap \"10px\"\n   :children\n   [[choices-list]\n    [choice-hinzufuegen]\n    [rc/title\n     :level :level2\n     :label \"Musterl\u00f6sung:\"]\n    [single-choice-beantworten-body 1 @(rf/subscribe [:frage-erstellen/choices]) ; 1 is dummy id\n     @(rf/subscribe [:frage-erstellen/single-choice-loesung])         ; initial value for radio buttons\n     (fn [antwort] (rf/dispatch [:frage-erstellen/update :frage/single-choice-loesung antwort]))]]])\n\n\n(defn multiple-choice-erstellen\n  []\n  [v-box :src (at)\n   :gap \"10px\"\n   :children\n   [[choices-list]\n    [choice-hinzufuegen]\n    [rc/title\n     :level :level2\n     :label \"Musterl\u00f6sung:\"]\n    [multiple-choice-beantworten-body 1 @(rf/subscribe [:frage-erstellen/choices])\n     @(rf/subscribe [:frage-erstellen/multiple-choice-loesung])       ; initial value for checkboxes\n     (fn [in-answer? choice-text]\n       (rf/dispatch [:frage-erstellen/multiple-choice-lsg-update in-answer? choice-text]))]]])\n\n\n(defn text-frage-erstellen\n  []\n  [v-box :src (at)\n   :children\n   [[rc/title\n     :level :level2\n     :label \"L\u00f6sungskriterien (sichtbar f\u00fcr Korrektoren):\"]\n    [textfrage-beantworten-body 1\n     @(rf/subscribe [:frage-erstellen/loesungskriterien])\n     (fn [antwort] (rf/dispatch [:frage-erstellen/update :frage/loesungskriterien antwort]))]]])\n\n\n(defn can-erstellen?\n  []\n  (let [frage @(rf/subscribe [:frage-erstellen/frage])\n        typ (:frage/typ frage)]\n    (and\n      (seq (:frage/frage-text frage))\n      (seq (:frage/punkte frage))\n      (cond                                                 ; hat loesung?\n        (= typ :frage.typ/single-choice) (:frage/single-choice-loesung frage)\n        (= typ :frage.typ/text) true\n        (= typ :frage.typ/multiple-choice) true)         ; spaeter: zuordnungsfrage braucht zuordnungsmap als loesung\n      (cond                                                 ; hat choices\n        (or (= typ :frage.typ/single-choice)\n            (= typ :frage.typ/multiple-choice)) (seq (:frage/choices frage))\n        (= typ :frage.typ/text) true))))\n\n\n(defn frage-erstellen\n  []\n  [v-box :src (at)\n   :size \"auto\"\n   :gap \"5px\"\n   :children\n   [[rc/title :src (at)\n     :level :level1\n     :label \"Frage erstellen\"]\n    [rc/line]\n    [fragentyp-auswaehlen]\n    [frage-text-input]\n    [punkte-input]\n    (let [typ @(rf/subscribe [:frage-erstellen/typ])]\n      (cond (= typ :frage.typ/single-choice) [single-choice-erstellen]\n            (= typ :frage.typ/multiple-choice) [multiple-choice-erstellen]\n            (= typ :frage.typ/text) [text-frage-erstellen]\n            :else [:h1 \"not implemented\"]))\n    [rc/button :src (at)\n     :class \"button-primary\"\n     :on-click #(rf/dispatch [:frage-erstellen/erstellen])\n     :disabled? (not (can-erstellen?))\n     :label \"Erstellen\"]]])\n\n"]}