{"version":3,"sources":["korrektur/views.cljs"],"mappings":";AAOA,2BAAA,3BAAMA;AAAN,AAEE,WAAA,AAAAC,PAAMC,uBAAM,sDAAA,mFAAA,zIAACC;AAAb,AAAA,0FAAA,mDAAA,mFAAA,4HAAA,mFAAA,sDAAA,2CAAA,qDAAA,SAAA,sDAAA,tXAEO,CAAA,6DAAsBD;;AAQ/B,iCAAA,yCAAAE,1EAAMM;AAAN,AAAA,IAAAL,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;QAAAA,JACkCO;kBADlC,AAAAL,4CAAAF,eAAA,zEACIM;AADJ,AAAA,0FAAA,mDAAA,mFAAA,8CAAA,kBAAA,mFAAA,sDAAA,2CAAA,qDAAA,OAAA,+MAAA,+DAAA,WAAAH,nOAMa,8CAAA,0FAAA,xIAACD,4CAAIK;AANlB,AAOkB,8BAAA,mFAAA,1GAACC,0LAAkC,AAAA,AAAAL;2BAPrD,mFAAA,8CAAA,WAAA,mFAAA,sDAAA,2CAAA,qDAAA,SAAA,qLAAA,+DAAA,WAAAC,zMAWa,8CAAA,4EAAA,1HAACF,4CAAIK;AAXlB,AAYkB,8BAAA,mFAAA,1GAACC,sLAAgC,AAAA,AAAAJ;uGAZnD,mFAAA,8CAAA,mFAAA,sDAAA,2CAAA,qDAAA,SAAA,sDAAA,cAAA,6DAAA,xkBAaI,CAAA,oDAAaE;AAbjB,AAiBwB,8BAAA,mFAAA,1GAACE;;;AAGzB,iCAAA,jCAAMC,0EACHC,MAAMC;AADT,AAEE,IAAAC,WAAMF;IAANE,eAAA,EAAA,CAAAA,oBAAAC,oBAAA,AAAAD,aAAA;AAAA,AAAA,QAAAA;KAAA;AAAA;;;KAAA;AAAA;;;KAAA;AAAA;;;KAAA;AAAA;;;KAAA;AAAA;;;KAAA;AAM0B,QAAA,+EAAA,RAAgCD;;;;AAN1D,MAAA,KAAAG,MAAA,CAAA,mEAAAF;;;;AASF,wCAAA,xCAAMG,wFACHC;AADH,AAEE,GAAA,AAAAC,cAAQD;AAAR,0FAAA;;AAEE,GAAA,AAAAC,cAAQ,AAAA,qFAAQD;AAAhB,0FAAA,8CAAA,2CAAA,uDAAA,2CAAA,uDAAA,wBAEG,CAAA,8LAAA,yVAAA,5dAAoB,AAAA,wHAA2BA,8DAC1C,wDAAA,mFAAA,4EAAA,vNAACE,+CAAOF;;AAHhB,0FAAA,8CAAA,2CAAA,uDAAA,2CAAA,uDAAA,sBAKG,CAAA,sDAAe,AAACP,+BAAe,AAAA,qFAAQO,UAAU,AAAA,wFAASA;;;;AAGjE,8CAAA,9CAAMG;AAAN,AAEE,oBAAA,AAAAvB,hBAAMwB,gCAAW,sDAAA,mFAAA,zIAACtB;AAAlB,AAAA,0FAAA,mDAAA,mFAAA,oZAAA,mFAAA,uOAAA,mFAAA,gFAAA,mFAAA,2LAAA,mFAAA,iEAAA,mFAAA,2KAAA,wIAAA,xmDAEQ,qKAAA,kKAAA,1RAAK,AAAA,wGAAmBsB,kEAAiB,AAAA,gGAAeA,6KACzD,CAAA,0DAAmB,AAAA,4FAAaA,mKAChC,mKACA,AAAA,sHAA0BA,wJAC1B,oJACA,AAAA,sGAAkBA,0GACrBf,+BAAee,yGACfL,sCAAsB,AAAA,2FAAWK;;AAGvC,2BAAA,3BAAMC;AAAN,AAAA,0FAAA,mDAAA,oHAAA,jCAGI1B,oHACAwB","names":["korrektur.views/headline","cljs.core/deref","user","re_frame.core.subscribe","p__26083","map__26084","cljs.core/--destructure-map","cljs.core.get","p1__26077#","p1__26078#","korrektur.views/korrektur-form","frag-punkte","m","re-frame.core/dispatch","korrektur.views/error-handling","error","status","G__26085","cljs.core/Keyword","js/Error","korrektur.views/korrektur-erfolgreich","gesendet","cljs.core/not","cljs.core.get_in","korrektur.views/show-antwort-to-korrigieren","korrektur","korrektur.views/overview"],"sourcesContent":["(ns korrektur.views\n  (:require\n    [korrektur.events]\n    [korrektur.subs]\n    [re-frame.core :as rf]))\n\n\n(defn headline\n  []\n  (let [user @(rf/subscribe [:korrektor])]\n    [:div\n     [:p (str \"Logged in as: \" user)\n      [:input\n       {:type  \"button\"\n        :value \"Logout\"\n        ;; :on-click #(rf/dispatch [:logout])\n        }]]]))\n\n\n(defn korrektur-form\n  [{frag-punkte :frage/punkte :as m}]\n  [:div\n   [:p \"Korrekturtext: \"\n    [:input\n     {:type  \"text\"\n      :value (get m :korrektur/korrektur-text \"Korrekturtext\")\n      :on-change #(rf/dispatch [:korrektur/schreiben (-> % .-target .-value)])}]]\n   [:p \"Punkte: \"\n    [:input\n     {:type \"number\"\n      :value (get m :correction/points 0)\n      :on-change #(rf/dispatch [:correction/points (-> % .-target .-value)])}]\n    (str \" von \" frag-punkte)]\n   [:p\n    [:input {:type  \"button\"\n             :value \"Korrigieren\"\n             :on-click #(rf/dispatch [:korrektur/senden])}]]])\n\n\n(defn error-handling\n  [error status]\n  (case error\n    :no-fitting-answer \"Antwort, die korrigiert werden sollte, nicht vorhanden.\"\n    :correction-feedback-missing \"Korrekturtext angeben.\"\n    :correction-points-missing \"Punkte angeben.\"\n    :invalid-points \"Eingabe keine g\u00fcltige Punktzahl.\"\n    :exceeding-number-of-points \"Angegebene Punktzahl zu gro\u00df.\"\n    :backend-not-responding (str \"Servererror (Statuscode \" status \").\")))\n\n\n(defn korrektur-erfolgreich\n  [gesendet]\n  (if-not gesendet\n    [:p]\n    (if-not (:error gesendet)\n      [:p {:style {:color \"green\"}}\n       (str \"Korrektur \\\"\" (:korrektur/korrektur-text gesendet) \"\\\" (\"\n            (get-in gesendet [:korrektur/antwort :antwort/punkte]) \" Punkte) erfolgreich gespeichert.\")]\n      [:p {:style {:color \"red\"}}\n       (str \"Error: \" (error-handling (:error gesendet) (:status gesendet)))])))\n\n\n(defn show-antwort-to-korrigieren\n  []\n  (let [korrektur @(rf/subscribe [:korrektur/erhalten])]\n    [:div\n     [:h2 (str (:frage/frage-text korrektur) \" - \" (:frage/punkte korrektur) \" Punkte\")]\n     [:p (str \"Antwort-Id \" (:antwort/id korrektur))]\n     [:p (str \"L\u00f6sungsvorschlag: \")]\n     [:p (:frage/loesungskriterien korrektur)]\n     [:p (str \"Antwort:\")]\n     [:p (:antwort/antwort korrektur)]\n     [korrektur-form korrektur]\n     [korrektur-erfolgreich (:gesendet korrektur)]]))\n\n\n(defn overview\n  []\n  [:div\n   [headline]\n   [show-antwort-to-korrigieren]])\n"]}