; This is the Calva evaluation results output window.
; TIPS: The keyboard shortcut `ctrl+alt+o o` shows and focuses this window
;   when connected to a REPL session.
; Please see https://calva.io/output/ for more info.
; Happy coding! ♥️

; Jacking in...
; Connecting using "deps.edn" project type.
; You can make Calva auto-select this.
;   - See https://calva.io/connect-sequences/
; 
; Starting Jack-in Terminal: pushd /home/matvey/Documents/University/Functional_Programming/Project/expert-parakeet ; java -jar '/home/matvey/.vscode/extensions/betterthantomorrow.calva-2.0.378/deps.clj.jar' -Sdeps '{:deps {nrepl/nrepl {:mvn/version,"1.0.0"},cider/cider-nrepl {:mvn/version,"0.28.5"}}}' -M -m nrepl.cmdline --middleware "[cider.nrepl/cider-middleware]" ; popd
; Using host:port localhost:41279 ...
; Hooking up nREPL sessions ...
; Connected session: clj
; TIPS:
;   - You can edit the contents here. Use it as a REPL if you like.
;   - `alt+enter` evaluates the current top level form.
;   - `ctrl+enter` evaluates the current form.
;   - `alt+up` and `alt+down` traverse up and down the REPL command history
;      when the cursor is after the last contents at the prompt
;   - Clojure lines in stack traces are peekable and clickable.
; Evaluating code from settings: 'calva.autoEvaluateCode.onConnect.clj'
nil
clj꞉user꞉>  ; Use `alt+enter` to evaluate
clj꞉user꞉> 
; Jack-in done.
clj꞉user꞉> 
2023-07-14T08:04:10.580Z pop-os DEBUG [datahike.connector:142] - Using config  {:keep-history? true, :index :datahike.index/hitchhiker-tree, :store {:id "expert-db", :backend :mem}, :initial-tx (#:db{:ident :question/id, :valueType :db.type/string, :cardinality :db.cardinality/one, :unique :db.unique/identity, :index true} #:db{:ident :question/type, :valueType :db.type/keyword, :cardinality :db.cardinality/one} #:db{:ident :question/question-statement, :valueType :db.type/string, :cardinality :db.cardinality/one} #:db{:ident :question/points, :valueType :db.type/long, :cardinality :db.cardinality/one} #:db{:ident :question/evaluation-criteria, :valueType :db.type/string, :cardinality :db.cardinality/one} #:db{:ident :question/possible-solutions, :cardinality :db.cardinality/many, :valueType :db.type/string} #:db{:ident :question/single-choice-solution, :valueType :db.type/string, :cardinality :db.cardinality/one} #:db{:ident :question/multiple-choice-solution, :cardinality :db.cardinality/many, :valueType :db.type/string} #:db{:ident :answer/id, :valueType :db.type/string, :cardinality :db.cardinality/one, :unique :db.unique/identity, :index true} #:db{:ident :answer/user, :valueType :db.type/ref, :cardinality :db.cardinality/one} #:db{:ident :answer/question, :valueType :db.type/ref, :cardinality :db.cardinality/one} #:db{:ident :answer/answer, :cardinality :db.cardinality/many, :valueType :db.type/string} #:db{:ident :answer/points, :valueType :db.type/long, :cardinality :db.cardinality/one} #:db{:ident :correction/corrector, :valueType :db.type/ref, :cardinality :db.cardinality/one} #:db{:ident :correction/answer, :valueType :db.type/ref, :cardinality :db.cardinality/one} #:db{:ident :correction/feedback, :valueType :db.type/string, :cardinality :db.cardinality/one} #:db{:ident :question-set/id, :valueType :db.type/string, :cardinality :db.cardinality/one, :unique :db.unique/identity, :index true} #:db{:ident :question-set/name, :valueType :db.type/string, :cardinality :db.cardinality/one} #:db{:ident :question-set/start, :valueType :db.type/instant, :cardinality :db.cardinality/one} #:db{:ident :question-set/end, :valueType :db.type/instant, :cardinality :db.cardinality/one} #:db{:ident :question-set/questions, :cardinality :db.cardinality/many, :valueType :db.type/ref} #:db{:ident :question-set/passing-score, :valueType :db.type/long, :cardinality :db.cardinality/one} #:db{:ident :user/id, :valueType :db.type/string, :cardinality :db.cardinality/one, :unique :db.unique/identity, :index true} #:db{:ident :user/course-iterations, :cardinality :db.cardinality/many, :valueType :db.type/ref} #:db{:ident :course/id, :valueType :db.type/string, :cardinality :db.cardinality/one, :unique :db.unique/identity, :index true} #:db{:ident :course/course-name, :valueType :db.type/string, :cardinality :db.cardinality/one} #:db{:ident :course/question-sets, :cardinality :db.cardinality/many, :valueType :db.type/ref} #:db{:ident :course-iteration/id, :valueType :db.type/string, :cardinality :db.cardinality/one, :unique :db.unique/identity, :index true} #:db{:ident :course-iteration/course, :valueType :db.type/ref, :cardinality :db.cardinality/one} #:db{:ident :course-iteration/year, :valueType :db.type/long, :cardinality :db.cardinality/one} #:db{:ident :course-iteration/semester, :valueType :db.type/string, :cardinality :db.cardinality/one} #:db{:ident :course-iteration/question-sets, :cardinality :db.cardinality/many, :valueType :db.type/ref}), :name "scandalous-crowned-shrew", :attribute-refs? false, :schema-flexibility :write, :index-config {:index-b-factor 17, :index-log-size 283, :index-data-node-size 300}, :cache-size 100000}
2023-07-14T08:04:10.588Z pop-os DEBUG [datahike.connector:82] - Transacting with arguments:  {:tx-data (#:db{:ident :question/id, :valueType :db.type/string, :cardinality :db.cardinality/one, :unique :db.unique/identity, :index true} #:db{:ident :question/type, :valueType :db.type/keyword, :cardinality :db.cardinality/one} #:db{:ident :question/question-statement, :valueType :db.type/string, :cardinality :db.cardinality/one} #:db{:ident :question/points, :valueType :db.type/long, :cardinality :db.cardinality/one} #:db{:ident :question/evaluation-criteria, :valueType :db.type/string, :cardinality :db.cardinality/one} #:db{:ident :question/possible-solutions, :cardinality :db.cardinality/many, :valueType :db.type/string} #:db{:ident :question/single-choice-solution, :valueType :db.type/string, :cardinality :db.cardinality/one} #:db{:ident :question/multiple-choice-solution, :cardinality :db.cardinality/many, :valueType :db.type/string} #:db{:ident :answer/id, :valueType :db.type/string, :cardinality :db.cardinality/one, :unique :db.unique/identity, :index true} #:db{:ident :answer/user, :valueType :db.type/ref, :cardinality :db.cardinality/one} #:db{:ident :answer/question, :valueType :db.type/ref, :cardinality :db.cardinality/one} #:db{:ident :answer/answer, :cardinality :db.cardinality/many, :valueType :db.type/string} #:db{:ident :answer/points, :valueType :db.type/long, :cardinality :db.cardinality/one} #:db{:ident :correction/corrector, :valueType :db.type/ref, :cardinality :db.cardinality/one} #:db{:ident :correction/answer, :valueType :db.type/ref, :cardinality :db.cardinality/one} #:db{:ident :correction/feedback, :valueType :db.type/string, :cardinality :db.cardinality/one} #:db{:ident :question-set/id, :valueType :db.type/string, :cardinality :db.cardinality/one, :unique :db.unique/identity, :index true} #:db{:ident :question-set/name, :valueType :db.type/string, :cardinality :db.cardinality/one} #:db{:ident :question-set/start, :valueType :db.type/instant, :cardinality :db.cardinality/one} #:db{:ident :question-set/end, :valueType :db.type/instant, :cardinality :db.cardinality/one} #:db{:ident :question-set/questions, :cardinality :db.cardinality/many, :valueType :db.type/ref} #:db{:ident :question-set/passing-score, :valueType :db.type/long, :cardinality :db.cardinality/one} #:db{:ident :user/id, :valueType :db.type/string, :cardinality :db.cardinality/one, :unique :db.unique/identity, :index true} #:db{:ident :user/course-iterations, :cardinality :db.cardinality/many, :valueType :db.type/ref} #:db{:ident :course/id, :valueType :db.type/string, :cardinality :db.cardinality/one, :unique :db.unique/identity, :index true} #:db{:ident :course/course-name, :valueType :db.type/string, :cardinality :db.cardinality/one} #:db{:ident :course/question-sets, :cardinality :db.cardinality/many, :valueType :db.type/ref} #:db{:ident :course-iteration/id, :valueType :db.type/string, :cardinality :db.cardinality/one, :unique :db.unique/identity, :index true} #:db{:ident :course-iteration/course, :valueType :db.type/ref, :cardinality :db.cardinality/one} #:db{:ident :course-iteration/year, :valueType :db.type/long, :cardinality :db.cardinality/one} #:db{:ident :course-iteration/semester, :valueType :db.type/string, :cardinality :db.cardinality/one} #:db{:ident :course-iteration/question-sets, :cardinality :db.cardinality/many, :valueType :db.type/ref})}
2023-07-14T08:04:10.637Z pop-os DEBUG [datahike.transactor:41] - Transactor rx thread gracefully closed
2023-07-14T08:04:10.638Z pop-os DEBUG [datahike.connector:142] - Using config  {:keep-history? true, :index :datahike.index/hitchhiker-tree, :store {:id "expert-db", :backend :mem}, :initial-tx (#:db{:ident :question/id, :valueType :db.type/string, :cardinality :db.cardinality/one, :unique :db.unique/identity, :index true} #:db{:ident :question/type, :valueType :db.type/keyword, :cardinality :db.cardinality/one} #:db{:ident :question/question-statement, :valueType :db.type/string, :cardinality :db.cardinality/one} #:db{:ident :question/points, :valueType :db.type/long, :cardinality :db.cardinality/one} #:db{:ident :question/evaluation-criteria, :valueType :db.type/string, :cardinality :db.cardinality/one} #:db{:ident :question/possible-solutions, :cardinality :db.cardinality/many, :valueType :db.type/string} #:db{:ident :question/single-choice-solution, :valueType :db.type/string, :cardinality :db.cardinality/one} #:db{:ident :question/multiple-choice-solution, :cardinality :db.cardinality/many, :valueType :db.type/string} #:db{:ident :answer/id, :valueType :db.type/string, :cardinality :db.cardinality/one, :unique :db.unique/identity, :index true} #:db{:ident :answer/user, :valueType :db.type/ref, :cardinality :db.cardinality/one} #:db{:ident :answer/question, :valueType :db.type/ref, :cardinality :db.cardinality/one} #:db{:ident :answer/answer, :cardinality :db.cardinality/many, :valueType :db.type/string} #:db{:ident :answer/points, :valueType :db.type/long, :cardinality :db.cardinality/one} #:db{:ident :correction/corrector, :valueType :db.type/ref, :cardinality :db.cardinality/one} #:db{:ident :correction/answer, :valueType :db.type/ref, :cardinality :db.cardinality/one} #:db{:ident :correction/feedback, :valueType :db.type/string, :cardinality :db.cardinality/one} #:db{:ident :question-set/id, :valueType :db.type/string, :cardinality :db.cardinality/one, :unique :db.unique/identity, :index true} #:db{:ident :question-set/name, :valueType :db.type/string, :cardinality :db.cardinality/one} #:db{:ident :question-set/start, :valueType :db.type/instant, :cardinality :db.cardinality/one} #:db{:ident :question-set/end, :valueType :db.type/instant, :cardinality :db.cardinality/one} #:db{:ident :question-set/questions, :cardinality :db.cardinality/many, :valueType :db.type/ref} #:db{:ident :question-set/passing-score, :valueType :db.type/long, :cardinality :db.cardinality/one} #:db{:ident :user/id, :valueType :db.type/string, :cardinality :db.cardinality/one, :unique :db.unique/identity, :index true} #:db{:ident :user/course-iterations, :cardinality :db.cardinality/many, :valueType :db.type/ref} #:db{:ident :course/id, :valueType :db.type/string, :cardinality :db.cardinality/one, :unique :db.unique/identity, :index true} #:db{:ident :course/course-name, :valueType :db.type/string, :cardinality :db.cardinality/one} #:db{:ident :course/question-sets, :cardinality :db.cardinality/many, :valueType :db.type/ref} #:db{:ident :course-iteration/id, :valueType :db.type/string, :cardinality :db.cardinality/one, :unique :db.unique/identity, :index true} #:db{:ident :course-iteration/course, :valueType :db.type/ref, :cardinality :db.cardinality/one} #:db{:ident :course-iteration/year, :valueType :db.type/long, :cardinality :db.cardinality/one} #:db{:ident :course-iteration/semester, :valueType :db.type/string, :cardinality :db.cardinality/one} #:db{:ident :course-iteration/question-sets, :cardinality :db.cardinality/many, :valueType :db.type/ref}), :name "harsh-mountain-hare", :attribute-refs? false, :schema-flexibility :write, :index-config {:index-b-factor 17, :index-log-size 283, :index-data-node-size 300}, :cache-size 100000}
2023-07-14T08:04:10.641Z pop-os DEBUG [datahike.connector:82] - Transacting with arguments:  {:tx-data (#:question{:id "1", :type :question.type/free-text, :question-statement "Wie geht es dir heute?", :evaluation-criteria "Student schreibt Worte (7P)", :points 7} #:question{:id "2", :type :question.type/free-text, :question-statement "Fühlen sie sich prüfungsbereit?", :evaluation-criteria "Lösungskriterien", :points 1} #:question{:id "3", :type :question.type/free-text, :question-statement "Nächste Frage gefällig?", :evaluation-criteria "Studi muss freudig Ja sagen.", :points 5} #:question{:id "4", :type :question.type/single-choice, :question-statement "Was ist die Hauptstadt von Italien?", :possible-solutions #{"Pizza" "Wien" "Venedig" "Rom"}, :single-choice-solution "Rom", :points 1} #:question{:id "5", :type :question.type/multiple-choice, :question-statement "Was ist gut?", :possible-solutions #{"Eis" "Lasagne" "Schnecken" "Pasta"}, :multiple-choice-solution #{"Eis" "Lasagne" "Pasta"}, :points 1} #:question{:id "6", :question-statement "Nächste Frage gefällig?", :type :question.type/free-text, :evaluation-criteria "Lösung", :points 1} #:question-set{:id "1", :name "Test 1", :questions [[:question/id "1"] [:question/id "3"] [:question/id "4"] [:question/id "5"]]} #:question-set{:id "2", :name "Test 2", :questions [[:question/id "1"] [:question/id "6"]]} #:course{:id "0", :course-name "Fach 1", :question-sets []} #:course{:id "1", :course-name "Fach 2", :question-sets []} #:course-iteration{:id "1", :course [:course/id "0"], :year 2000, :semester "WiSe", :question-sets [[:question-set/id "1"]]} #:course-iteration{:id "2", :course [:course/id "1"], :year 2001, :semester "SoSe", :question-sets [[:question-set/id "1"] [:question-set/id "2"]]} #:user{:id "0", :course-iterations [[:course-iteration/id "1"] [:course-iteration/id "2"]]} #:user{:id "1", :course-iterations [[:course-iteration/id "1"] [:course-iteration/id "2"]]} #:user{:id "2", :course-iterations [[:course-iteration/id "1"]]} #:user{:id "3", :course-iterations [[:course-iteration/id "2"]]} #:answer{:id "1", :question [:question/id "1"], :user [:user/id "0"], :answer ["Antwort"], :points 4} #:answer{:id "2", :question [:question/id "3"], :user [:user/id "3"], :answer ["Antwort"], :points 1} #:answer{:id "3", :question [:question/id "1"], :user [:user/id "2"], :answer ["Korrigierte Antwort"], :points 5} #:answer{:id "4", :question [:question/id "2"], :user [:user/id "0"], :answer ["Bool Antwort"], :points 1} #:answer{:id "5", :question [:question/id "3"], :user [:user/id "0"], :answer ["Antwort"], :points 0} #:answer{:id "6", :question [:question/id "3"], :user [:user/id "2"], :answer ["Antwort"], :points 0} #:answer{:id "7", :question [:question/id "3"], :user [:user/id "3"], :answer ["Korrigierte Antwort"], :points 0} #:answer{:id "8", :question [:question/id "2"], :user [:user/id "0"], :answer ["Bool Antwort"], :points 0} #:correction{:answer [:answer/id "3"], :corrector [:user/id "1"], :feedback "Superb!"} #:correction{:answer [:answer/id "7"], :corrector [:user/id "1"], :feedback "Superb!"})}
; Execution error (FileNotFoundException) at question.question/eval5891$loading (REPL:1).
; Could not locate services/question_service/question_service__init.class, services/question_service/question_service.clj or services/question_service/question_service.cljc on classpath. Please check that namespaces with dashes use underscores in the Clojure file name.
clj꞉question.question꞉> 
; Execution error (FileNotFoundException) at question.question/eval38035$loading (REPL:1).
; Could not locate question_service/question_service__init.class, question_service/question_service.clj or question_service/question_service.cljc on classpath. Please check that namespaces with dashes use underscores in the Clojure file name.
clj꞉question.question꞉> 
; Execution error (FileNotFoundException) at question-set.question-set/eval38053$loading (REPL:1).
; Could not locate question_set_service/question_set_service__init.class, question_set_service/question_set_service.clj or question_set_service/question_set_service.cljc on classpath. Please check that namespaces with dashes use underscores in the Clojure file name.
clj꞉question-set.question-set꞉> 
; Execution error (FileNotFoundException) at question.question/eval38061$loading (REPL:1).
; Could not locate question_service/question_service__init.class, question_service/question_service.clj or question_service/question_service.cljc on classpath. Please check that namespaces with dashes use underscores in the Clojure file name.
clj꞉question.question꞉> 
nil
clj꞉question-service.question-service꞉> 
nil
clj꞉question.question꞉> 
; Syntax error compiling at (src/clj/views/question/question.clj:13:31).
; No such var: serv/extract-question-id-from-question
clj꞉question.question꞉> 
; Execution error (IllegalAccessError) at question.question/eval40523$loading (REPL:1).
; extract-question-id-from-question does not exist
clj꞉question.question꞉> 
#'question-service.question-service/extract-question-id-from-question
clj꞉question-service.question-service꞉> 
#'question-service.question-service/extract-question-statement-from-question
clj꞉question-service.question-service꞉> 
#'question-service.question-service/extract-question-type-from-question
clj꞉question-service.question-service꞉> 
#'question-service.question-service/extract-possible-solutions-from-question
clj꞉question-service.question-service꞉> 
; Execution error (IllegalAccessError) at question.question/eval40537$loading (REPL:1).
; dispatch-question-type does not exist
clj꞉question.question꞉> 
#'question-service.question-service/labeled-radio
clj꞉question-service.question-service꞉> 
#'question-service.question-service/dispatch-question-type
clj꞉question-service.question-service꞉> 
nil
clj꞉question.question꞉> 
#'question.question/question-form
clj꞉question.question꞉> 
nil
clj꞉question-service.question-service꞉> 
; Execution error (AssertionError) at auth/eval45021 (auth.clj:42).
; Assert failed: OAUTH_CLIENT_ID is not set
; oauth-client-id
clj꞉core꞉> 
; nREPL Connection was closed
