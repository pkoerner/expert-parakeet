(ns view.course-iteration.create-course-iteration-view-test
  (:require
    [clojure.string :as string]
    [clojure.test :as t :refer [deftest testing]]
    [clojure.test.check.clojure-test :refer [defspec]]
    [clojure.test.check.generators :as gen]
    [clojure.test.check.properties :as prop]
    [domain.spec]
    [test-extensions :refer [test-with-check]]
    [views.course-iteration.create-course-iteration-view :refer [course-iteration-form submit-success-view]]))


(def ^:private opts {:clojure.spec.test.check/opts {:num-tests 200}})


(deftest test-course-iteration-form
  (testing "Testing that the course-iteration-form contains every course and test that is sent to it."
    (t/are [courses question-sets post-destination]
           (let [test-result (str (course-iteration-form courses question-sets post-destination))]
             (and
               (every? #(string/includes? test-result (:course/name %)) courses)
               (every? #(string/includes? test-result (:question-set/name %)) question-sets)
               (string/includes? test-result post-destination)))

      [#:course{:id "2Jw0c5U", :name "0x0"}]
      [#:question-set{:id "nA1", :name "T897OJj4U1"}]
      "https://some.url"

      []
      []
      "https://some.url"

      [#:course{:id "4091undas", :name "HHello"}
       #:course{:id "21408uisdh5U", :name "Hell"}
       #:course{:id "dasdaU", :name "Bye"}
       #:course{:id "2JwaadsU", :name "Tschau"}]
      [#:question-set{:id "nA1", :name "T897OJj4U1"}
       #:question-set{:id "2", :name "Test 2"}
       #:question-set{:id "3", :name "Test 3"}
       #:question-set{:id "4", :name "Test 4"}
       #:question-set{:id "5", :name "Test 5"}
       #:question-set{:id "6", :name "Test 6"}
       #:question-set{:id "7", :name "Test 7"}
       #:question-set{:id "8", :name "Test 8"}
       #:question-set{:id "9", :name "Test 9"}
       #:question-set{:id "10", :name "Test 10"}]
      "https://some.url"))



  (testing "Testing that errors are displayed in the form, when errors are passed to the view."
    (let [courses []
          question-sets []
          post-destination "https://some.url"
          course-error {:course "Some course error"}
          year-error {:year "Some year error"}
          semester-error {:semester "Some semester error"}
          question-set-error {:question-sets "Some question-set error"}]
      (t/are [errors]
             (let [test-result (course-iteration-form courses question-sets post-destination :errors errors)]
               (every? #(string/includes? test-result %) (vals errors)))

        course-error
        year-error
        semester-error
        question-set-error
        ;; some random merges of the error messages. No particular reason why those are tested.
        (merge course-error year-error)
        (merge course-error semester-error)
        (merge question-set-error semester-error)
        (merge course-error year-error semester-error question-set-error)))))


(deftest test-submit-success-view
  (testing "Autogenerated tests for submit-success-view"
    (test-with-check `submit-success-view opts)))


(def error-map-gen
  (let [rand-error-map (->> #{:course :year :semester :question-sets}
                            (map (fn [key] {key (str "Error for key " key)}))
                            (gen/elements))]
    (gen/fmap #(apply merge %)
              (gen/vector rand-error-map 1 4))))


#_{:clj-kondo/ignore [:unresolved-symbol]}


(defspec test-generated-course-iteration-form-errors-are-displayed 100
  (let [courses []
        question-sets []
        post-destination "https://some.url"]
    (prop/for-all [error-map error-map-gen]
                  (let [test-result (course-iteration-form courses question-sets post-destination :errors error-map)]
                    (every? #(string/includes? test-result %) (vals error-map))))))
